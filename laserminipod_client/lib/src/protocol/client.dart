/* AUTOMATICALLY GENERATED CODE DO NOT MODIFY */
/*   To generate run: "serverpod generate"    */

// ignore_for_file: implementation_imports
// ignore_for_file: library_private_types_in_public_api
// ignore_for_file: non_constant_identifier_names
// ignore_for_file: public_member_api_docs
// ignore_for_file: type_literal_in_constant_pattern
// ignore_for_file: use_super_parameters

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:serverpod_client/serverpod_client.dart' as _i1;
import 'dart:async' as _i2;
import 'package:laserminipod_client/src/protocol/spraywall_route.dart' as _i3;
import 'protocol.dart' as _i4;

/// {@category Endpoint}
class EndpointRoute extends _i1.EndpointRef {
  EndpointRoute(_i1.EndpointCaller caller) : super(caller);

  @override
  String get name => 'route';

  /// Deletes a route from the `spraywallroute` table based on its ID.
  _i2.Future<void> deleteRoute(int id) => caller.callServerEndpoint<void>(
        'route',
        'deleteRoute',
        {'id': id},
      );

  /// Loads a specific route by its ID.
  _i2.Future<_i3.SpraywallRoute?> loadRoute(int id) =>
      caller.callServerEndpoint<_i3.SpraywallRoute?>(
        'route',
        'loadRoute',
        {'id': id},
      );

  /// Saves a new route into the database.
  _i2.Future<bool> saveRoute(_i3.SpraywallRoute route) =>
      caller.callServerEndpoint<bool>(
        'route',
        'saveRoute',
        {'route': route},
      );

  /// Returns a new unique ID for a route.
  /// (Optional: Only needed if IDs are not auto-generated by the database.)
  _i2.Future<int> getNewId() => caller.callServerEndpoint<int>(
        'route',
        'getNewId',
        {},
      );

  /// Loads all routes from the `spraywallroute` table.
  _i2.Future<List<_i3.SpraywallRoute>> loadAllRoutes() =>
      caller.callServerEndpoint<List<_i3.SpraywallRoute>>(
        'route',
        'loadAllRoutes',
        {},
      );

  /// Checks if a route with the same handles already exists.
  /// Routes are considered equal if they consist of the same handles.
  _i2.Future<bool> existsRouteAlready(_i3.SpraywallRoute route) =>
      caller.callServerEndpoint<bool>(
        'route',
        'existsRouteAlready',
        {'route': route},
      );

  /// Checks if a given name is already assigned to a route.
  _i2.Future<bool> nameAlreadyAssigned(String name) =>
      caller.callServerEndpoint<bool>(
        'route',
        'nameAlreadyAssigned',
        {'name': name},
      );

  /// Test function to check communication.
  _i2.Future<void> test() => caller.callServerEndpoint<void>(
        'route',
        'test',
        {},
      );
}

class Client extends _i1.ServerpodClientShared {
  Client(
    String host, {
    dynamic securityContext,
    _i1.AuthenticationKeyManager? authenticationKeyManager,
    Duration? streamingConnectionTimeout,
    Duration? connectionTimeout,
    Function(
      _i1.MethodCallContext,
      Object,
      StackTrace,
    )? onFailedCall,
    Function(_i1.MethodCallContext)? onSucceededCall,
    bool? disconnectStreamsOnLostInternetConnection,
  }) : super(
          host,
          _i4.Protocol(),
          securityContext: securityContext,
          authenticationKeyManager: authenticationKeyManager,
          streamingConnectionTimeout: streamingConnectionTimeout,
          connectionTimeout: connectionTimeout,
          onFailedCall: onFailedCall,
          onSucceededCall: onSucceededCall,
          disconnectStreamsOnLostInternetConnection:
              disconnectStreamsOnLostInternetConnection,
        ) {
    route = EndpointRoute(this);
  }

  late final EndpointRoute route;

  @override
  Map<String, _i1.EndpointRef> get endpointRefLookup => {'route': route};

  @override
  Map<String, _i1.ModuleEndpointCaller> get moduleLookup => {};
}
